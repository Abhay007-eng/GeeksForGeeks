🚀 Day 11. Maximum Product Subarray 🧠


💡 Problem Description:
Given an array arr[] that contains both positive and negative integers (and possibly zeros), find the maximum product of any subarray within the array.

Note: The result will always fit within the range of a 32-bit integer.

🔍 Example Walkthrough:
Input:
arr[] = [-2, 6, -3, -10, 0, 2]
Output:
180

Explanation:
The subarray with the maximum product is {6, -3, -10} with product = 6 _ (-3) _ (-10) = 180.

Input:
arr[] = [-1, -3, -10, 0, 60]
Output:
60

Explanation:
The subarray with the maximum product is {60}.

Input:
arr[] = [2, 3, 4]
Output:
24

Explanation:
For an array with all positive elements, the result is the product of all elements.



Solution 

class Solution:

    def maxProduct(self, arr):
        max_product = arr[0]
        max_val = arr[0]
        min_val = arr[0]

        for i in range(1, len(arr)):
            if arr[i] < 0:
                max_val, min_val = min_val, max_val

            max_val = max(arr[i], max_val * arr[i])
            min_val = min(arr[i], min_val * arr[i])

            max_product = max(max_product, max_val)

        return max_product
