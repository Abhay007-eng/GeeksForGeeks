Day 8. Stock Buy and Sell – Max one Transaction Allowed 🧠
The problem can be found at the following link: Problem Link

💡 Problem Description:
Given an array prices[] of length n, representing the prices of stocks on different days, find the maximum profit possible by buying and selling the stocks on different days, with at most one transaction allowed (1 buy + 1 sell). If no profit can be made, return 0.

Note: Stocks must be bought before being sold.

🔍 Example Walkthrough:
Input:
prices[] = [7, 10, 1, 3, 6, 9, 2]
Output:
8

Explanation:
Buy the stock on day 2 at price 1 and sell it on day 5 at price 9. Profit is 9 - 1 = 8.

Input:
prices[] = [7, 6, 4, 3, 1]
Output:
0

Explanation:
Prices decrease every day, so no profit is possible.

Input:
prices[] = [1, 3, 6, 9, 11]
Output:
10

Explanation:
Buy on day 1 (price = 1) and sell on the last day (price = 11). Profit is 11 - 1 = 10.

Solution 

class Solution:
    def maximumProfit(self, prices):
        buyPrice = prices[0]
        maxProfit = 0

        for i in range(1, len(prices)):
            if prices[i] > buyPrice:
                maxProfit = max(maxProfit, prices[i] - buyPrice)
            else:
                buyPrice = prices[i]

        return maxProfit
